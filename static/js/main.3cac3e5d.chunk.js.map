{"version":3,"sources":["components/User/Form/index.jsx","components/Home/index.jsx","components/Task/TaskForm/index.jsx","components/Task/index.jsx","components/App/index.jsx","serviceWorker.js","reducers/task.js","store.js","reducers/home.js","index.js"],"names":["UserForm","props","state","name","handleChangeField","bind","handleSubmit","nextProps","userToEdit","this","setState","ev","preventDefault","onSubmit","onEdit","axios","put","_id","then","res","data","post","key","event","target","value","className","onChange","type","placeholder","onClick","React","Component","connect","home","dispatch","Home","handleDelete","handleEdit","onLoad","id","onDelete","delete","user","setEdit","users","isLoading","map","to","TaskForm","description","Task","tasks","match","params","Promise","all","get","res1","res2","console","log","allTasks","task","element","withRouter","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reducers","combineReducers","action","concat","filter","undefined","store","createStore","ReactDOM","render","history","createHistory","App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3cac3e5d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass UserForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: \"\"\r\n    };\r\n\r\n    this.handleChangeField = this.handleChangeField.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.userToEdit) {\r\n      this.setState({\r\n        name: nextProps.userToEdit.name\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSubmit(ev) {\r\n    ev.preventDefault();\r\n    const { onSubmit, userToEdit, onEdit } = this.props;\r\n    const { name } = this.state;\r\n\r\n    if (!userToEdit) {\r\n      axios\r\n        .post(\"https://bunnny-studio.herokuapp.com/api/v1/users\", {\r\n          name\r\n        })\r\n        .then(res => onSubmit(res.data))\r\n        .then(() =>\r\n          this.setState({\r\n            name: \"\"\r\n          })\r\n        );\r\n    } else {\r\n      return axios\r\n        .put(`https://bunnny-studio.herokuapp.com/api/v1/users/${userToEdit._id}`, { name })\r\n        .then(res => onEdit(res.data))\r\n        .then(() => this.setState({ name: \"\" }));\r\n    }\r\n  }\r\n\r\n  handleChangeField(key, event) {\r\n    this.setState({\r\n      [key]: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { name } = this.state;\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <h5 className=\"center blue-text\">Add Users</h5>\r\n        <div className=\"input-field col s12\">\r\n          <input\r\n            onChange={ev => this.handleChangeField(\"name\", ev)}\r\n            value={name}\r\n            type=\"text\"\r\n            placeholder=\"User Name\"\r\n          />\r\n          <button\r\n            className=\"btn waves-effect waves-light\"\r\n            type=\"submit\"\r\n            name=\"action\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: data => dispatch({ type: \"SUBMIT_USER\", data }),\r\n  onEdit: data => dispatch({ type: 'EDIT_ARTICLE', data})\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  userToEdit: state.home.userToEdit,\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserForm);\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport UserForm from \"../User/Form\";\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.handleEdit = this.handleEdit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { onLoad } = this.props;\r\n    axios(\"https://bunnny-studio.herokuapp.com/api/v1/users\").then(res => onLoad(res.data));\r\n  }\r\n\r\n  handleDelete(id) {\r\n    const { onDelete } = this.props;\r\n    return axios\r\n      .delete(`https://bunnny-studio.herokuapp.com/api/v1/users/${id}`)\r\n      .then(() => onDelete(id));\r\n  }\r\n\r\n  handleEdit(user) {\r\n    const { setEdit } = this.props;\r\n    setEdit(user);\r\n  }\r\n\r\n  render() {\r\n    const { users, isLoading } = this.props;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <h1 className=\"center blue-text\"> Bunny Studio</h1>\r\n          <UserForm />\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col l12\">\r\n            {isLoading ? (\r\n              <div>Loading...</div>\r\n            ) : (\r\n              users.map(user => {\r\n                return (\r\n                  <ul className=\"collection\">\r\n                    <li className=\"collection-item\" key={user._id}>\r\n                      {user.name}\r\n                      <button\r\n                        onClick={() => this.handleEdit(user)}\r\n                        className=\"btn space\"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                      <button\r\n                        onClick={() => this.handleDelete(user._id)}\r\n                        className=\"btn space\"\r\n                      >\r\n                      &times;\r\n                      </button>\r\n                      <Link to={'/addTask/' + user._id}>\r\n                        <button className=\"btn space\">Add Task</button>\r\n                      </Link>\r\n                    </li>\r\n                  </ul>\r\n                );\r\n              })\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  users: state.home.users,\r\n  isLoading: false\r\n});\r\n\r\n// user actions\r\nconst mapDispatchToProps = dispatch => ({\r\n  onLoad: data => dispatch({ type: \"HOME_PAGE_LOADED\", data }),\r\n  onDelete: id => dispatch({ type: \"DELETE_USER\", id }),\r\n  setEdit: user => dispatch({ type: \"SET_EDIT\", user })\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass TaskForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      description: '',\r\n      state: ''\r\n    }\r\n\r\n    this.handleChangeField = this.handleChangeField.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(ev){\r\n    const { id } = this.props\r\n    const { description, state } = this.state;\r\n    ev.preventDefault();\r\n    axios.post(`https://bunnny-studio.herokuapp.com/api/v1/tasks/${id}`, {\r\n      description,\r\n      state,\r\n    }).then(() => {\r\n      this.setState({\r\n        description: '',\r\n        state: '',\r\n      })\r\n    })\r\n  }\r\n\r\n  handleChangeField(key, event) {\r\n    this.setState({\r\n      [key]: event.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { description, state } = this.state;\r\n    return (\r\n     <div className=\"row\">\r\n        <div className=\"input-field col s12\">\r\n          <input\r\n            onChange={ev => this.handleChangeField(\"description\", ev)}\r\n            value={description}\r\n            type=\"text\"\r\n            placeholder=\"Description\"\r\n          />\r\n          <input\r\n            onChange={ev => this.handleChangeField(\"state\", ev)}\r\n            value={state}\r\n            type=\"text\"\r\n            placeholder=\"Please Input True if Done or False If TODO\"\r\n          />\r\n          <button\r\n            className=\"btn waves-effect waves-light\"\r\n            type=\"submit\"\r\n            name=\"action\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskForm;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport TaskForm from \"./TaskForm\";\r\n\r\nclass Task extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: \"\",\r\n      tasks: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const id = this.props.match.params.id;\r\n    const promises = Promise.all([\r\n      axios.get(`https://bunnny-studio.herokuapp.com/api/v1/users/${id}`),\r\n      axios.get(\"https://bunnny-studio.herokuapp.com/api/v1/tasks\")\r\n    ]);\r\n\r\n    promises.then(([res1, res2]) => {\r\n      console.log(res2.data);\r\n      this.setState({\r\n        user: res1.data.user.name,\r\n        tasks: res2.data.allTasks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { user, tasks } = this.state;\r\n    console.log(tasks);\r\n    const id = this.props.match.params.id;\r\n    if (user && tasks)\r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <h1 className=\"center blue-text\">Add User Task</h1>\r\n          </div>\r\n          <h5 className=\"center blue-text\">Name:</h5>\r\n          <h6 className=\"center teal-text\">{user}</h6>\r\n          <TaskForm id={id} />\r\n          <div>\r\n            <h5 className=\"teal-text\">List of Tasks</h5>\r\n            {tasks.map(task => {\r\n              let element = '';\r\n              if(task.state === true)\r\n                element = 'done'\r\n              else  element = 'todo'\r\n              return (\r\n                <ul className=\"collections\" key={task._id}>\r\n                  <li className=\"collection-item\" >Description: {task.description}</li>\r\n                  <li className=\"collection-item\" >State: {element} </li>\r\n                </ul>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      );\r\n    else {\r\n      return (\r\n        <div className=\"center blue-text\">\r\n          <h3>Loading...</h3>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport { withRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport Home  from \"../Home/index\";\r\nimport Task from \"../Task/index\";\r\n\r\nconst App = props => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route path=\"/addTask/:id\" component={Task} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export default (state = {tasks: []}, action) => {\r\n    switch (action.type) {\r\n      case \"TASKS_FETCHED\":\r\n        return {\r\n          ...state,\r\n          tasks: action.data.tasks\r\n        };\r\n        case 'SUBMIT_TASK':\r\n        return {\r\n          ...state,\r\n          tasks: ([action.data.tasks]).concat(state.tasks)\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  ","import { createStore, combineReducers } from \"redux\";\r\n\r\nimport { home } from \"./reducers\";\r\nimport { task } from \"./reducers\"\r\n\r\nconst reducers = combineReducers({\r\n  home,\r\n  task\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;\r\n","export default (state = {users: []}, action) => {\r\n    switch (action.type) {\r\n      case \"HOME_PAGE_LOADED\":\r\n        return {\r\n          ...state,\r\n          isLoading: false,\r\n          users: action.data.users\r\n        };\r\n      case 'SUBMIT_USER':\r\n        return {\r\n          ...state,\r\n          users: ([action.data.users]).concat(state.users)\r\n        };\r\n      case 'DELETE_USER':\r\n        return {\r\n          ...state,\r\n          users: state.users.filter(user => user._id !== action.id)\r\n        };\r\n      case 'SET_EDIT':\r\n        return {\r\n          ...state,\r\n          userToEdit: action.user\r\n        };\r\n      case 'EDIT_USER':\r\n        return {\r\n          ...state,\r\n          users: state.users.map(user => {\r\n            if(user._id === action.data.user._id){\r\n              return {\r\n                ...action.data.user\r\n              }\r\n            }\r\n            return user\r\n          }),\r\n          userToEdit: undefined,\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  ","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport createHistory from 'history/createBrowserHistory'\r\nimport { Provider } from 'react-redux';\r\nimport { App } from \"./components\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { Route, Switch, Router } from \"react-router-dom\";\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <Router history={createHistory()}>\r\n    <Provider store={store}>\r\n    <Switch>\r\n      <Route path=\"/\" component={App} />\r\n    </Switch>\r\n    </Provider>\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}